{"name":"Connectir","tagline":"R package for Connectome-Wide Association Studies","body":"Connectir is an R package principally for conducting Connectome-Wide Association Studies (CWAS) using Multivariate-Distance Matrix Regression (MDMR). CWAS with MDMR attempts to find regions of the brain with functional connectivity patterns that are significantly associated with a phenotype. For instance, if you have two groups (ADHD and Controls) and each subject has a resting-state fMRI scan, then CWAS-MDMR would find brain regions whose connectivity patterns significantly differentiate the two groups. Additional post-hoc analyses such as seed-based correlation analyses would be needed to discern the specific connections and direction of any group difference between ADHD and Controls with CWAS-MDMR.\r\n\r\nOn this page, we show how to install the connectir package and associated command-line scripts (Section 1). Then, we give a brief tutorial on how to run a vanilla CWAS analysis and leave the details for the [wiki](https://github.com/czarrar/connectir/wiki) (Section 2). Finally, we have links to our publications and conference presentations (Section 3). Please [contact me](zarrar.shehzad@yale.edu) if you have any questions.\r\n\r\n# Installation\r\n\r\n## Quick Approach\r\n\r\n1. Install [R](http://cran.r-project.org)) and optionally [Rstudio](http://www.rstudio.com).\r\n2. Install the relevant packages within R including connectir using my script [connectir_install.R](https://github.com/czarrar/Rinstall/blob/master/connectir_install.R).\r\n\r\n## Details and Troubleshooting\r\n\r\n### Parallel Matrix Algebra Operations\r\n\r\nThere are two ways to parallelize the analyses. One approach is to divide your workflow into smaller chunks and run those separately (like separate processes). This comes with the R packages installed with [connectir_install.R](https://github.com/czarrar/Rinstall/blob/master/connectir_install.R). Another approach is to run each matrix algebra operation (e.g., dot product) in parallel, which we go into detail in this section. Below I detail different linear algebra libraries and linking them to R. Note this section is still under development.\r\n\r\n#### Intel MKL\r\n\r\nIf you have Windows, Ubuntu, or RedHat/Centos, you can install Revolution R. This is a version of R compiled with Intel MKL by the company Revolution Analytics available free for academic use. You can get it from [here](http://www.revolutionanalytics.com/which-r-is-right-for-me).\r\n\r\nAnother option is to compile and install R linked with Intel MKL on your own. Here is a good and quick [tutorial](http://www.r-bloggers.com/compiling-r-3-0-1-with-mkl-support).\r\n\r\n#### OpenBlas\r\n\r\nYou can also install R via my own script that links R with a parallel matrix algebra library called openblas. This script is in the [Rinstall repo](http://github.com/czarrar/Rinstall) and is called `install.py`.\r\n\r\nAnother option for linux is to download repositories. A good/quick [tutorial](http://www.stat.cmu.edu/~nmv/2013/07/09/for-faster-r-use-openblas-instead-better-than-atlas-trivial-to-switch-to-on-ubuntu) can be found [here](http://www.stat.cmu.edu/~nmv/2013/07/09/for-faster-r-use-openblas-instead-better-than-atlas-trivial-to-switch-to-on-ubuntu).\r\n\r\n\r\n### Installing Connectir and Other R Packages\r\n\r\nAfter R is setup, there are several packages within R that need to be installed. To do this, please run [connectir_install.R](https://github.com/czarrar/Rinstall/blob/master/connectir_install.R). After downloading (or copying and pasting) this script to your machine, you can run it with `Rscript connectir_install.R`. On certain linux systems, you need to ensure you have libcurl and libxml installed.\r\n\r\nThis script is also a work in progress, please [contact me](mailto:zarrar.shehzad@gmail.com) if you have trouble.\r\n\r\n\r\n# Tutorial\r\n\r\nHere we give a vanilla run of CWAS-MDMR and further details can be found on the [wiki](https://github.com/czarrar/connectir/wiki). I also go through these steps in our recent resting-state poster (2014).\r\n\r\n## Subject Distances\r\n\r\n```R\r\nconnectir_subdist.R \\ \r\n-i functional_path_list.txt \\ \r\n--automask1 \\\r\n --brainmask1 standard_grey_matter.nii.gz \\ \r\n--bg standard_brain_4mm.nii.gz \\ \r\n--memlimit 20 -c 3 -t 4 \\\r\n subject_distances_outdir\r\n```\r\n\r\n* `-i`: List of your input functional images. Can be nifti (nii or nii.gz) containing voxelwise time-series or text files containing region/parcellation time-series (columns=regions and rows=time-points).\r\n* `--automask1`: Will generate the group mask containing only voxels that have non-zero values (i.e., variance) across all participants.\r\n* `--brainmask1`: An additional prior mask. We tend to use a 25% probability grey matter mask in MNI152 standard space. You can find these on the CPAC website.\r\n* `--bg`: This is used to determine writing of output voxelwise files and also in the future will be used to generate images of the results. Since my data here is assumed to be voxelwise in 4mm space, the standard reference image is also in 4mm space. \r\n* `--memlimit`: The memory (RAM) limit of the processes in GB. Here it is set to 20GB.\r\n* `-c`: Number of parallel jobs/forks to run in parallel.\r\n* `-t`: Number of parallel linear algebra operations.\r\n* Finally the last argument gives the full path to the output directory.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}